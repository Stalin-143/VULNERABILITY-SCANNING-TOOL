import socket
import subprocess
import nmap
import threading
from queue import Queue
import time
import tkinter as tk
from tkinter import messagebox

# Global queue for multi-threading
queue = Queue()

# Port Scanning Function with Multi-threading
def scan_port(target, port, open_ports):
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.settimeout(1)
    try:
        result = sock.connect_ex((target, port))
        if result == 0:
            open_ports.append(port)
    except Exception as e:
        print(f"Error scanning port {port}: {e}")
    finally:
        sock.close()

def threader(target, open_ports):
    while not queue.empty():
        port = queue.get()
        scan_port(target, port, open_ports)
        queue.task_done()

def scan_ports(target, port_range):
    print(f"Scanning {target} for open ports in range {port_range[0]}-{port_range[1]}...")
    open_ports = []

    # Add ports to queue
    for port in range(port_range[0], port_range[1] + 1):
        queue.put(port)

    # Create threads
    thread_count = 100
    threads = []
    for _ in range(thread_count):
        thread = threading.Thread(target=threader, args=(target, open_ports))
        thread.start()
        threads.append(thread)

    # Wait for threads to finish
    queue.join()

    return open_ports

# Service and Version Detection using nmap
def detect_services(target, open_ports):
    nm = nmap.PortScanner()
    nm.scan(target, arguments='-sV')  # '-sV' flag for service and version detection
    service_info = {}
    for port in open_ports:
        try:
            service = nm[target]['tcp'][port]['name']
            version = nm[target]['tcp'][port].get('version', 'Unknown')
            service_info[port] = (service, version)
        except KeyError:
            print(f"No service info found for port {port}")
    return service_info

# Configuration Analysis (Extended)
def check_common_misconfigurations(target):
    print("Checking for common misconfigurations...")
    # Check for weak SSH configuration
    weak_ssh_command = f"ssh -o KexAlgorithms=+diffie-hellman-group1-sha1 {target}"
    try:
        subprocess.run(weak_ssh_command, shell=True, timeout=5)
        print("Warning: Weak SSH configuration detected!")
    except subprocess.TimeoutExpired:
        print("SSH configuration appears secure.")
    except Exception as e:
        print(f"Error checking SSH configuration: {e}")

    # Check for weak SSL/TLS configurations (placeholder for future enhancements)
    print("Checking SSL/TLS configuration... (Not implemented)")

# Main Function
def vulnerability_scan(target, port_range=(1, 1024)):
    start_time = time.time()

    open_ports = scan_ports(target, port_range)
    print(f"Open Ports: {open_ports}")

    if open_ports:
        service_info = detect_services(target, open_ports)
        print("Service and Version Information:")
        for port, info in service_info.items():
            print(f"Port {port}: {info[0]} - Version: {info[1]}")

    check_common_misconfigurations(target)

    end_time = time.time()
    print(f"Scan completed in {end_time - start_time:.2f} seconds.")

# Function to be called when the "Scan" button is clicked
def start_scan():
    target = target_entry.get()
    port_range_input = port_range_entry.get()

    try:
        port_range = tuple(map(int, port_range_input.split('-')))
        vulnerability_scan(target, port_range)
        messagebox.showinfo("Scan Complete", "Vulnerability scan complete. Check the console for details.")
    except ValueError:
        messagebox.showerror("Input Error", "Invalid port range input. Please use the format: start-end.")

# GUI setup using tkinter
root = tk.Tk()
root.title("Vulnerability Scanner")

# Target input
tk.Label(root, text="Target (IP or domain):").grid(row=0, column=0, padx=10, pady=10)
target_entry = tk.Entry(root, width=30)
target_entry.grid(row=0, column=1, padx=10, pady=10)

# Port range input
tk.Label(root, text="Port Range (e.g., 1-1024):").grid(row=1, column=0, padx=10, pady=10)
port_range_entry = tk.Entry(root, width=30)
port_range_entry.grid(row=1, column=1, padx=10, pady=10)

# Scan button
scan_button = tk.Button(root, text="Start Scan", command=start_scan)
scan_button.grid(row=2, columnspan=2, pady=20)

root.mainloop()
 # type: ignore